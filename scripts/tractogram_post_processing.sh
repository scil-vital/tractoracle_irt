#!/bin/bash
# This script is used to post-process the tractograms generated by the FineTrack pipeline.
# It removes streamlines with length < 20mm and > 200mm, and re-scores the tractograms.

set -e

DEST_FOLDER=$1
DATASETDIR=$2
FORCE=$3

EXTENSION="trk"

if [ -z "${DEST_FOLDER}" ] || [ ! -d "${DEST_FOLDER}" ]; then
    echo "Please provide a valid destination folder."
    echo "Usage: $0 <destination_folder> <dataset_directory>"
    exit 1
fi

if [ -z "${DATASETDIR}" ] || [ ! -d "${DATASETDIR}" ]; then
    echo "Please provide a valid dataset directory."
    echo "Usage: $0 <destination_folder> <dataset_directory>"
    exit 1
else
    if [ ! -d "${DATASETDIR}/scoring_data" ]; then
        echo "The dataset directory must contain a scoring_data folder."
        exit 1
    fi
fi

# If FORCE is not empty, make sure it is the -f flag
force_args=()
if [ ! -z "$3" ] && [ "$3" != "-f" ]; then
    echo "The FORCE argument must be -f."
    exit 1
else
    EXTENSION="trk"
    if [ "$3" == "-f" ]; then
        force_args+=("-f")
        
        # If there's a 4th argument, it should be the extension
        if [ ! -z "$4" ]; then
            EXTENSION=$4
        fi
    else
        # If there's a 3rd argument, it should be the extension
        if [ ! -z "$3" ]; then
            EXTENSION=$3
        fi
    fi
fi


if [[ ! "$EXTENSION" =~ ^(trk|tck)$ ]]; then
    echo "Invalid extension. Please use 'trk' or 'tck'."
    echo "Got: ${EXTENSION}"
    exit 1
fi

# Depending on the version of scilpy,
# the scoring script was renamed after the 2.0.2 release.
if command -v scil_tractogram_segment_and_score.py &> /dev/null
then
    # With scilpy <= 2.0.2
    SCORING_SCRIPT="scil_tractogram_segment_and_score.py"
elif command -v scil_tractogram_segment_with_ROI_and_score.py &> /dev/null
then
    # With scilpy > 2.0.2
    SCORING_SCRIPT="scil_tractogram_segment_with_ROI_and_score.py"
else
    echo "There are no scilpy scoring scripts available on PATH."
    exit 1
fi

echo "Using the ${SCORING_SCRIPT} script."

# Create a folder to store the post-processed tractograms
mkdir -p ${DEST_FOLDER}/postproc

files=(${DEST_FOLDER}/*.${EXTENSION})
echo "Found ${#files[@]} tractograms to post-process."
for f in "${files[@]}"
do
    echo "========================================="
    echo "=>Post-processing ${f}..."
    tractogram_pre="$(basename ${f})"
    tractogram_post="post_${tractogram_pre}"

    # Create a folder for tractogram f
    output_folder=${DEST_FOLDER}/postproc/${tractogram_pre%.trk}
    mkdir -p ${output_folder}

    # Remove streamlines with length < 20mm and > 200mm
    echo "=>1/2: Removing streamlines with length < 20mm and > 200mm..."
    scil_tractogram_filter_by_length.py \
        ${DEST_FOLDER}/${tractogram_pre} \
        ${output_folder}/${tractogram_post} \
        --minL 20 \
        --maxL 200 \
        --reference ${DATASETDIR}/scoring_data/t1.nii.gz \
        "${force_args[@]}"

    # Re-score the tractogram, this time with streamlines
    # of length between 20mm and 200mm
    echo "=>2/2: Scoring the new tractogram..."
    nb_streamlines=$(scil_tractogram_count_streamlines.py ${output_folder}/${tractogram_post} --print_count_alone)
    echo "Number of streamlines after postprocessing: ${nb_streamlines}"

    # Only score if there are streamlines left, but nb_streamlines is a string
    if [ $nb_streamlines -gt 0 ]; then
        ${SCORING_SCRIPT} \
            ${output_folder}/${tractogram_post} \
            ${DATASETDIR}/scoring_data/scil_scoring_config.json \
            ${output_folder}/scores \
            --gt_dir ${DATASETDIR}/scoring_data \
            --reference ${DATASETDIR}/scoring_data/t1.nii.gz \
            "${force_args[@]}"

        echo "RESULTS: ================================"
        head -n 25 ${output_folder}/scores/results.json
        echo "[...]"
    else
        echo "No streamlines left after post-processing. Skipping scoring."
    fi
    echo "========================================="
done
